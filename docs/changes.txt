
Changes in 0.05:

    + Fixed a severe bug which broke dynamic closures defined inside
      methods and another one which made brace-delimited closures
      dynamic.

Changes in 0.04:

    + Now allows anonymous procs in addition to anonymous subs.

    + Added module Perl::Regex

    + Bug fix: 'while' now returns the value of the last iteration of
      the body block or nil if the body was never executed.

    + Renamed 'reduce' to 'filter', since that's a clearer name.

    + Updated print_docstrings.dk to handle Verbatim Paragraphs
      (i.e. indented text) in docstrings.

Changes in 0.03

    +  You can now assign a list to multiple values by making the LHS
       of an assignment into a list of names.  For example, this:

            [a b] = [list 1 2]

       is equivalent to this:

            t = [list 1 2]
            a = t@0
            b = t@1

       This provides a simple way for functions to return multiple
       values.

    +  It is now possible to declare a closure with a single LoL that
       begins with an arglist delimited by '|' characters.  For
       example, these are equivalent:

            a = {|x y| value (x+y)}
            a = {x y} => {value (x+y)}
            a = [sub {x y} {value (x+y)}]

       A closure with no arguments must still have the '|' present to
       distinguish it from a plain LoL:

            c = {|| puts "Something happened"}

       Ruby (and Smalltalk) programmers may find this familiar.

    +  POD is no longer part of the Deck language.  It is still used
       in docstrings, however.  This is because...

    +  It is now possible to force a LoL line to be treated as infix
       by beginning it with an '='.  This:

            x = {x y} => {=x+y}

       or this:

            x = {|x y| =x+y}
            
       is equivalent to this:

            x = {x y} => {value (x+y)}

       Think of it as an assignment with no left-hand side.

    +  Variable (and const) declarations that initialize the variables
       now have identical semantics to their equivalent assignments.
       In particular, you can now declare and initialize groups of
       variables in square brackets just like the multi-variable
       assignments.  For example:

            var [a b c] = :[1 2 3]
            var {[c d e] = :[4 5 6]; f = 7}

       (Note that the first form has a few quirks when dealing with
       non-alpha-numeric names.  This is documented in the manual.)

    +  Option --show-perl now skips all loaded modules.  New option
       --show-lib-perl implements the old behaviour.

    +  Various bug fixes.

Changes in 0.02

    +  Deck code is now executed by being compiled into Perl code and
       run by the Perl interpreter.  This should significantly improve
       performance.  The new command-line argument '--show-perl' will
       print the generated Perl code.

    +  Deck now defines local variables at the start of a procedure,
       regardless of the location of the 'var' statement as documented
       in manual.pod.  (It's still an error to use a variable before
       its declaration, however.)

    +  Struct-derived classes are no longer prevented from sharing a
       a variable name with an ancestor.

    +  Returns ('return' and 'next') are now instances of the new
       class 'Continuation'.

    +  Slight changes to built-in procedures 'lookup' and 'defined'.

    +  Added rudimentary backtrace capability.

    +  Lots of internal cleanup.

    +  Now supports module docstrings.

    +  Library docs are now complete.  (A bug in the docstring system
       was losing a lot of them.)

Changes in 0.1

    1) Initial release.
