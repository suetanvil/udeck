
=pod

=head1 Namespaces

Namespaces are delimited by '::', e.g. 'Namespace::subname::var'.

$Globals maintains a reference to the current namespace.  Unqualified
globals are automatically put there.

Should we be allowed to define names in other namespaces?
X	-yes! Macros need it.
X	-but! you can't switch namespaces inside a file.
X		-the 'use' statement sets it--the 'package' declaration just
X	     asserts it.  but it's mandatory(?).
	-also, what about private names in external namespaces?
		-we can get away without them.

Namespace variables beginning with '_' are private -- the system
refuses to look them up in qualified names and they are not imported.

Namespaces can be imported.  This copies all public namespace entries
to the current namespace (unless this is controlled somehow.)  Imports
may not override an existing name; hence, the first one wins.

The import statement allows selective importing and renaming:

    use VectorMath
    use VectorMath with {add; subtract; eigenValue}
    use VectorMath without {multiply; divide}
	use VectorMath with {add => plus; subtract => minus; eigenValue}
	use VectorMath rename {add => vectorAdd; subtract => vectorMinus}

A with/without/rename clause contains multiple sublists, each
containing either:
	1) a single symbol
	2) [=> <oldname> <newname>]



Predefined namespaces:

	Main			-- Default namespace.
	Lang			-- Language features; automatically imported.
	Sys				-- Implementation features
	Lang::*			-- Reserved.
	_::*			-- Reserved. Implementation-defined system functions.
	__::*			-- Reserved. mproc functions go here.


=head2 Importing

X	-the 'use' statement plus package path determines the filename to load.
X		-but the package loaded MUST, as its first statement, contain a 'package'
X		 declaration with a matching name.

X	-imported symbols are const.  (Otherwise, writing to them affects
X	 the local name only.  This is unexpected behaviour.  Fixing that
X	 would require making the bindings "soft links", which is tricky.
X	 Maybe this will get done later.)

X	-the load path is a simple global list in Sys called ModPath

X	-readfile enforces the presence of a matching package declaration,
X	 creates the namespace and makes it default.

X	-need to prevent reimportation of external modules from imported
X	 modules.
X		-what if the user overwrites an imported symbol?
X			-can't, 'cause it's const.

X	-loading a package needs to store the absolute filename and
X		a) skip reloading (but not importing)
X		b) die with an error if the new load is a different file.
X	 NO! Just don't import if the namespace already exists.

X	-direct access to private names in other scopes needs to be blocked.

	-with/without

	-rename


=head3 To do:

X	-define system names in Lang; auto-import them into Main.
	
	-Import modules
		-turn interp() into load.


=head2 Misc. To-do

X	-let symbols include '::'.

X	-create a subclass of LL::Context for the global context.
X	-add a default namespace.  This gets used for all unqualified sets
X	 and lookups.
X	-add builtins in '_' to access them.



=head2 Questions

X	-Should namespaces be declared before use?
X		-yes


=cut

