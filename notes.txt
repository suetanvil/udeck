

Notes:

	-Now uses square brackets for infix but tests don't all do that.

	-let's use ':' as the quote.

	-Tolerates [x], {x} and :[x] as proc argument lists.

	-** is not right-associative.

	-I think I'll bow to starting arrays with index 0.

	- Unary minus: space (e.g. "- 1") -> binary, no space (e.g. "-1") -> unary

	- if and while can take either a LoL or a single unquoted list as
	  an expression and either will be turned into a sub.  New subify
	  behaviour.
		-this applies to all subified functions.  Will probably also be default
		 behaviour for subified mproc arguments

	- okay, user-defined macros use the function arg convention.

	- macros are always defined at the global (module) level.

	- INIT ==> init

	- 'new' used to create objects.

	- user-defined operators all have the same precedence--just above '='.
		-will also be above ',' if I add that.

	- in float literals, the character following the '.' may not be an
	  underscore.

Functions Todo:
X	-listSized



X mprocs:
X 
X 	form: mproc <name> [ [strict? (sub[0..26]?|sym|list) <arg>]* ] <body>
X 
X 	modifiers:
X 		sub[number]		-- If a list, subify's with number arguments.
X 		symbol			-- If a symbol, quote
X 		list			-- If a list, quote
X 		strict			-- Require that the other modifier activate.
X 		
X 	so basically, mproc args must be LoLs.
X 
X 
X =example
X 
X mproc map {
X 	strict sub 1 block
X 	items
X } {
X 	var result = [listSized [block size]]
X 	var index = 0
X 
X 	foreach item in items {
X 		result@index = [block item]
X 		index = index + 1
X 	}
X 
X 	return result
X }
X 
X =done

Perl bindings:
	
Form 1:

X	perluse "File::Handle";
	perlsub split "split";

Form 2:

X	perlproc hello {nm} '''print "Hello, $nm\n";''' 



Forward declarations:

	proc Foo
	
	...

	proc Foo {a b} {....}

or

	mproc map {
		sub1 fn
		aList
	}

	...

	mproc map {
		sub1 fn
		aList
	} { ... }







Todo:
	-implement a "compiler" to produce perl subs
	-catch arg. count mismatches.

X	- pod
X	- macros
		-subify
X		-mprocs

X	- namespaces
X		- namespace resolution
X		- packages
X		- with/without clauses
X		- with renames
X		- 'rename' 

X	-_lreturn should have a better name: 'subreturn'?
X	- ARGS needs to be split into interp args and program args.
X		-and update runtests to work with argtest.

	- string interpolation
X		-\[nrfat] now works
X		-$interpolation
		-[interpolation]
X		-@interpolation
X		-hmmm.  What about ':"foo $bar"'
X			-" expressions are syntact shorthand the same way infix
X			 expressions are.

X	- should we allow local macros?
X		-for now, no!

X	- allow _ in numbers
	- scientific notation
X	- the empty symbol should be false
X	- fail49 -- recursive macro
X	- separate interp args from program args
X	- apply
X	- bug: need to unescape all operators
X	- need to check the argument counts of all built-in functions.

X	- intern.
X		-added
X		-need to protect the namespace from badly-formed variables.
X	- boolean not
X	- rename checkLoL and isLoL to checkQuotedLoL and isQuotedLoL
X		-also add unquoted versions	
X	- bug: arg. mismatch error msg is wrong for methods. count is off.	
X	- objects
X	- bug: compiler doesn't catch undefined vars at compile time.
X	- What to do about user-defined operators?
X		-allow them but advise against for now.
X		-need some testing
X	-bug: infix precedence is broken.
X	-bug: 'var' doesn't allow operators as var names.

	- make everything an object
	- traits
	- forward declaration of functions
		-var works but should be a bonk/oif pairing that ensures it.
		-mprocs should also work this way
	- should 'sub{}{}' magically auto-bracket?
		-how about the => operator?
	-need canary to catch broken infix expressions		
	-bug: implement '||' and '&&'

	- merge symbol class-level qualified checks with namespace-level
	  checks.
	- catch unescaped operator in prefix LoL expression
	- static variables
	- integers
	- subify builtin

	- rewrite compiler
		- make the context a PerlObj in itself and pass it to
		  var/const/sub/set.
	- tuple assignment
			a,b,c = [foo]
			a,b,c = :[1 2 3]
			a, = :[1]
		-also, comma as list constructor?
			a, b, c = d, e, f = g, h, i
	-list slice
		-adding a slice fn.
		-should add the ability to '@'
	-object printstr/storestr
	-get rid of println
	-'var x = <y>' should parse the assignment as fully infix.
		-maybe.	
	-mprocs should be able to select the argument name(s) of their
	 blocks.  (e.g. foreach)





		