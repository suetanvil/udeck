

Notes:

	-Now uses square brackets for infix but tests don't all do that.

	-let's use ':' as the quote.

	-Tolerates [x], {x} and :[x] as proc argument lists.

	-** is not right-associative.

	-I think I'll bow to starting arrays with index 0.

	- Unary minus: space (e.g. "- 1") -> binary, no space (e.g. "-1") -> unary

	- if and while can take either a LoL or a single unquoted list as
	  an expression and either will be turned into a sub.  New subify
	  behaviour.
		-this applies to all subified functions.  Will probably also be default
		 behaviour for subified mproc arguments

	- okay, user-defined macros use the function arg convention.


Functions Todo:
X	-listSized



X mprocs:
X 
X 	form: mproc <name> [ [strict? (sub[0..26]?|sym|list) <arg>]* ] <body>
X 
X 	modifiers:
X 		sub[number]		-- If a list, subify's with number arguments.
X 		symbol			-- If a symbol, quote
X 		list			-- If a list, quote
X 		strict			-- Require that the other modifier activate.
X 		
X 	so basically, mproc args must be LoLs.
X 
X 
X =example
X 
X mproc map {
X 	strict sub 1 block
X 	items
X } {
X 	var result = [listSized [block size]]
X 	var index = 0
X 
X 	foreach item in items {
X 		result@index = [block item]
X 		index = index + 1
X 	}
X 
X 	return result
X }
X 
X =done

Perl bindings:
	
Form 1:

	perluse "File::Handle";
	perlproc split "split";

Form 2:

	perlsub hello '''print "Hello, world!\n", $_[0], "\n";'''

	perlsub hello {nm} '''print "Hello, $nm\n";''' 




Todo:
	-implement a "compiler" to produce perl subs
	-catch arg. count mismatches.

X	- pod
X	- macros
		-subify
X		-mprocs

	- namespaces
		- namespace resolution
		- packages
	- static variables
	- objects
	- integers

	- string interpolation
X		-\[nrfat] now works
		-$interpolation
		-[interpolation]
		-@interpolation

	- What to do about user-defined operators?
	- handle unescaped operator in prefix LoL expression
X	- allow _ in numbers
	- scientific notation
	- the empty symbol should be false
