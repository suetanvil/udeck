

Notes:

	-Now uses square brackets for infix but tests don't all do that.

	-let's use ':' as the quote.

	-Tolerates [x], {x} and :[x] as proc argument lists.

	-** is not right-associative.

	-I think I'll bow to starting arrays with index 0.

	- Unary minus: space (e.g. "- 1") -> binary, no space (e.g. "-1") -> unary

	- if and while can take either a LoL or a single unquoted list as
	  an expression and either will be turned into a sub.  New subify
	  behaviour.
		-this applies to all subified functions.  Will probably also be default
		 behaviour for subified mproc arguments

	- okay, user-defined macros use the function arg convention.

	- macros are always defined at the global (module) level.

	- INIT ==> _init

	- 'new' used to create objects.


Functions Todo:
X	-listSized



X mprocs:
X 
X 	form: mproc <name> [ [strict? (sub[0..26]?|sym|list) <arg>]* ] <body>
X 
X 	modifiers:
X 		sub[number]		-- If a list, subify's with number arguments.
X 		symbol			-- If a symbol, quote
X 		list			-- If a list, quote
X 		strict			-- Require that the other modifier activate.
X 		
X 	so basically, mproc args must be LoLs.
X 
X 
X =example
X 
X mproc map {
X 	strict sub 1 block
X 	items
X } {
X 	var result = [listSized [block size]]
X 	var index = 0
X 
X 	foreach item in items {
X 		result@index = [block item]
X 		index = index + 1
X 	}
X 
X 	return result
X }
X 
X =done

Perl bindings:
	
Form 1:

X	perluse "File::Handle";
	perlsub split "split";

Form 2:

X	perlproc hello {nm} '''print "Hello, $nm\n";''' 




Todo:
	-implement a "compiler" to produce perl subs
	-catch arg. count mismatches.

X	- pod
X	- macros
		-subify
X		-mprocs

X	- namespaces
X		- namespace resolution
X		- packages
X		- with/without clauses
X		- with renames
X		- 'rename' 
	- static variables
	- objects
	- integers

X	-_lreturn should have a better name: 'subreturn'?
X	- ARGS needs to be split into interp args and program args.
X		-and update runtests to work with argtest.

	- string interpolation
X		-\[nrfat] now works
X		-$interpolation
		-[interpolation]
X		-@interpolation
X		-hmmm.  What about ':"foo $bar"'
X			-" expressions are syntact shorthand the same way infix
X			 expressions are.

	- What to do about user-defined operators?
	- handle unescaped operator in prefix LoL expression
X	- should we allow local macros?
X		-for now, no!

X	- allow _ in numbers
	- scientific notation
X	- the empty symbol should be false
X	- fail49 -- recursive macro
X	- separate interp args from program args
X	- apply
X	- bug: need to unescape all operators
X	- need to check the argument counts of all built-in functions.
3
	- merge symbol class-level qualified checks with namespace-level
	  checks.
	- intern.
X		-added
X		-need to protect the namespace from badly-formed variables.
X	- boolean not
X	- rename checkLoL and isLoL to checkQuotedLoL and isQuotedLoL
X		-also add unquoted versions	
	

	- needs a better name.
		-I'm thinking turtle-themed.
		-How about 'Mydas', from c. mydas, the green sea turtle?
			-no, taken.  Not a language but a DAS implementation.
				-but it's spelled MyDas, so maybe I can get away
				 without the capitalization.  Contact the author.


		