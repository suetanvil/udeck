
=head1 Final Blocks

Deck procedures need to have optional final blocks.  These are blocks
which execute after the function returns, regardless of how it
returns (i.e. even if through a continuation.)

=head2 Implementation

1) Factor out processing steps (e.g. macro appliction) from compile.

2) Add 'finalBlock' argument.

3) Apply processing steps to both body and finalBlock.

4) In sub:

	a) first eval @fixedBody, trapping return.

	b) next, eval @fixedFinalBlock.  Die if there's a return.

	c) return the result.

5) Add final block support to the callers.


	

=head2 Bugs

If a return skips a variable declaration and the finalizer references
the variable, the variable B<should> be nil.  Instead, there's a
'undefined variable' error.  This is because the current
implementation actually defines variables with the 'var' macro.

(Example: fail94b.dk)

What B<should> happen is that the compiler should check for uses
before definitions first, then move them to the start and put
initializers where the declarations were.  As the compiler gets
smarter, it can issue warnings.

WRT consts, this is tricky.  Best case: Compiler detects possible
return before const definition and use in final block and makes it an
error.

Alternately: make it nil until defined.  As the compiler gets smarter,
make it a warning.  Add a pragma to make the warning an error and
phase it on.

Alternate 2: require consts to be at the start of the proc and not
have complex expressions as initializers.  Blech!


