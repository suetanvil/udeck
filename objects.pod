
=head1 The Object System

=head2 Thoughts

I'm not going to try to implement the object system in pure Deck.
You're welcome.

For now, builtin types (list, string, etc.) are not OOPS.  That will
change.

Objects are a special type.

Classes are also a special type.  They are also callable and create
instances, then call 'INIT' with their arguments.

Let's use 'new' to create instances.  There's no real advantage to
making classes callable.

I'm not going to use the Perl object system until I have a better
grasp of everything.

=head2 Syntax

	class Foo Object {
		var xxx = 42
		var yyy = 53

		method INIT {x} {puts x}

		method bar {a} {puts a}
		method quux {b} {puts b}
	}


=head2 Semantics

	-instance variables are visible only to the object's methods, NOT to
	 subclasses and NOT to methods added after the fact.

	-where is 'self' added?

		stdout->print 42

		[\-> stdout print] 42

		var n = stdout->print
		n 42

	-what if a local class existed in the context that defined it?

=head2 To Do

	-basic class and object
X		-'class' type.
X		-'object' type.
X			-doesNotUnderstand
X		-lookup function.
			-special syntax for lookup.
		-class definition
			-class macro
X			-_::class function
				-inheritance
X				-methods
					-private methods
					-must return self
X				-instance variables
				-attributes
			-initializer
				-field initialization
		-class 'Object'

X		-object instantiation
	
		-make LL::Object a subclass of Context.
	




=head2 Issues

	-does a field decl. like "var x = [foo 4 2]" work?
		-what field order should I use?
		-how do I initialize them.
			-maybe define a bunch of unnamed methods to do it?










