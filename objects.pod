
=head1 The Object System

=head2 Thoughts

I'm not going to try to implement the object system in pure Deck.
You're welcome.

For now, builtin types (list, string, etc.) are not OOPS.  That will
change.

Objects are a special type.

Classes are also a special type.  They are also callable and create
instances, then call 'INIT' with their arguments.

Let's use 'new' to create instances.  There's no real advantage to
making classes callable.

I'm not going to use the Perl object system until I have a better
grasp of everything.

=head2 Syntax

	class Foo Object {
		var xxx = 42
		var yyy = 53

		method INIT {x} {puts x}

		method bar {a} {puts a}
		method quux {b} {puts b}
	}


	[o->m 42]

	-"->" is magical.
		-in prefix expressions, o->m is equivalent to (o->m) 
		 at the start of an expression
		-if escaped, behaves as usual.

	-"." is magical
			o.xxx = 123
			o.yyy = o.xxx + 42
			z = [foo o.xxx o.yyy]
		-'.' magically autoparens
X		-'.' needs higher precedence than '->'.
X			o.so->foo




=head2 Semantics

	-instance variables are visible only to the object's methods, NOT to
	 subclasses and NOT to methods added after the fact.

	-where is 'self' added?

		stdout->print 42

		[\-> stdout print] 42

		var n = stdout->print
		n 42

	-what if a local class existed in the context that defined it?

	-'public', 'readable' and 'writeable' declare public access for
	 ivars.

	-'super' is a magic word used by the . and -> macros as a flag
	 to indicate that it should expand to a different lookup function.

	-'_' convention should work on accessors as well.  So need to
	 append _get or _set rather than prepending.

	-going to make all ivars C++-private.


=head3 Subclass Implementation

	-objects are still a hash of names/values
		-ivars are mangled with the class ID.
		-uses are mangled at compile time.
			-this has to be done in methods and subs inside methods.

	-for now, we can get most of this by requiring that ivars are
	 unique in an inheritance tree.
		-call it a ToDo.
	



=head2 To Do

	-basic class and object
X		-'class' type.
			-perlform
X			-at, atPut, size, isIndexible
X		-'object' type.
X			-doesNotUnderstand
X		-lookup function.
X			-special syntax for lookup.
X		-class definition
X			-class macro
X			-_::class function
X				-inheritance
X				-methods
X					-private methods
X						-enforce at macro level
X						-rename get and set so that _ is preserved
X					-must return self
X					-self must be const
X					-super
X				-instance variables
X				-attributes
X					-access methods
X					-'.'
X						-assignment support
X						-autoparen
X						-_set must return assignment value
X						-must preserve privacy (name_set, not set_name)
X			-initializer
X				-field initialization  (left out for now--spooky)
			-must allow duplicate field names in the class heirarchy
X		-class 'Object'
X			-isTrue

		-binary operator to method conversion
			-equals

		-make everything an object

X		-object instantiation
	
X		-make LL::Object a subclass of Context.
	
=head 2 To Test

X	-do init args match up with [new Class args]?
X	-test passing args to _init
X	-subclass ivar may not mask superclass ivar
X	-private methods



=head2 Promoting Builtin Types

X	1) Rename LL::Datum back to LL::Object and LL::Object to LL::Struct.
X	2) Add Deck classes for the builtins.
X	3) Add method 'class' to all Deck types to retrieve
X	   the class.  For Objects, it returns the ' class' field; for
X	   everything else, it's the builtin Deck class.
X			-replace all accesses of the field with method calls.
X			-implement minimal classes for all built-in types.
				-fill them in in Lang.dk
X			-Implement 'new' for Struct subclasses only.


X	4) replace all uses of ' class' with calls to 'deckClass'.
X		-make class() store classes externally to the namespace.
	5) Move relevant stuff into Object

X	6) Let declarations in Lang.dk modify base class definitions.
X		-implement _::sys_class to represent the exact semantics
X		 of modifying an existing builtin class.
X		-actually, went with _class_ext to do it.

	7) Move to an object-oriented implementation
		-isIndexable, size should become attributes
X		-isNil
		-operators should become method calls.
			-need a builtin for that.
		-pass name to struct via class macro.
		-replace at and atPut functions with method calls.

=head2 Traits



=head2 Issues

	-does a field decl. like "var x = [foo 4 2]" work?
		-what field order should I use?
		-how do I initialize them.
			-maybe define a bunch of unnamed methods to do it?
		-answer: no.  Too spooky.  Do it in _init.











