# Object-oriented itterative Fibonacci number calculation using the
# sequence protocol.

class FibonacciList {
	var first second
	var prevCallIndex
	readable size

	method isIndexable_get {} {return true}

	method _init {sz} {
		size = sz
		self->_reset
	}

	method _reset {} {
		first = 1
		second = 1
		prevCallIndex = 0
	}

	method at {index} {
		self->_update index
		return first
	}

	method _update {reqIndex} {
		(reqIndex >= prevCallIndex) || [self->_reset]

		repeat (reqIndex - prevCallIndex) {
			var ns = first + second
			first = second
			second = ns
		}

		prevCallIndex = reqIndex
	}
}


proc printFibs {count} {
	var fl = [FibonacciList->new count]

	for n in fl {say n " "}
	puts
}

printFibs [str2num (Sys::Argv@0)]


