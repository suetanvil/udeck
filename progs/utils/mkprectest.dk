
# Emit a (very large) test case that exercises parsing of infix
# expressions.

# Unfortunately, this is too slow to actually be useful, but it makes
# for an okay example of mproc so there is that.


mproc permutations_for {
	seq
	sub 1 func
} {
	if (seq.size <= 1) {
		return [func seq]
	}

	var first = seq@0
	var rest = [slice seq 1 seq.last]

	permutations_for rest {
		for index in (0 .. a.size) {
			var left = [slice a 0 (index - 1)]
			var right = [slice a index a.last]

			func (left + [list first] + right)
		}
	}
}

proc withVarsAdded {opList} {
	var result = :[v0]

	var n = 1
	for op in opList {
		result = result + [list op "v$n"]
		n = n + 1
	}
	
	return result
}

# Supported operators.  '!!!!' is the stand-in user-defined op.
var operators = :['.' '@' '=>' '->'
				  '**' '*' '/' '//' '%' '+' '-' '<<' '>>'
				  '>>>' '<<<' '==' '===' '!=' '<' '>' '<=' '>=' '&' '|' '^'
				  '&&' '||' '!!!!' '=']

permutations_for operators {
	say "puts :("
	for exprPart in [withVarsAdded a] {
		say exprPart " "
	}
	puts ")"
}
