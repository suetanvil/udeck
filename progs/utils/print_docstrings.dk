

var DocStrings

=pod too slow

proc trimSpc {text} {
	'''Remove all spaces following a newline in a string.'''
	var index = 0
	var startOfLine = true
	var result = [stringSized text.size]
	var skipSpace = true

	for c in text {
		[not c.isSpace] && (skipSpace = false)

		if [not skipSpace] {
			result@index = c
			index = index + 1

			if (c.isSpace) {
				skipSpace = true
			}
		}
	}

	return [slice result 0 (index - 1)]
}

=cut

perlproc trimSpc {s} '''
$s =~ s/\A\s*//gmx;
$s =~ s/\s*\z//gmx;

$s =~ s/([^\n])\n([^\n])/$1 $2/gmx;
$s =~ s/(\n)[ \t]+/$1/gmx;
$s =~ s/[ \t]+/ /gmx;
return $s;
'''


proc isProcOrMProc {doc} {
	"Test if C<doc> is a proc or mproc."

	(doc@0 == :proc && ([slice (doc@1) 0 3] != '__::')) && [return true]
	(doc@0 == :mproc) && [return true]
	return false
}


proc printFunctions {} {
	var fDocs = [reduce isProcOrMProc DocStrings]

	puts "=head1 Procedures and MProcs\n\n"
	puts "=over\n\n"


	for doc in fDocs {
		var ftag = (doc@0)
		var fname = (doc@1)
		var fbuiltin = (doc@2)
		var fnargs = (doc@3)
		var fdoc = [trimSpc (doc@4)]

		var biText = ""
		fbuiltin && (biText = " B<(Built-in)>")

		var procType = "proc"
		if (ftag == :mproc) {
			procType = "mproc"
		} else {
			fnargs = "{$fnargs}"
		}


		puts "=item B<$procType $fname $fnargs>$biText\n"


		puts fdoc "\n"
	}

	puts "\n\n=back\n"
}


proc printMethodDoc {doc} {
	var tag = (doc@0)
	var name = (doc@1)
	var builtin = (doc@2)
	var className = (doc@3)
	var methodName = (doc@4)
	var args = (doc@5)
	var doc = [trimSpc (doc@6)]
	
	var biText = ""
	builtin && (biText = " B<(Built-in)>")

	puts "=item B<method $methodName {$args}>$biText\n"
	puts doc "\n"
}


proc printMethods {name} {
	var cl = [lookup [intern name]]
	var selectors = [sort cmp cl.selectors]
	var nm = cl.name

	puts "=over\n"

	foreach sel in selectors {
		var doc = [_::docstring_get "$name->$sel"]
		if (doc) {
			printMethodDoc doc
		}
	}

	puts "=back\n"
}


proc printClasses {} {
	var fDocs = [reduce {value (a@0 == :class)} DocStrings]

	puts "=head1 Classes\n\n"
	puts "=over\n\n"


	for doc in fDocs {
		var name = doc@1
		var builtin = doc@2
		var docstring = [trimSpc (doc@3)]

		var biText = ""
		builtin && (biText = " B<-- Built-in>")

		var cl = [lookup [intern name]]

		var sc = 'none'

		(cl == Object) || (sc = cl.superclass.name)
		sc = "($sc)"

		puts "=item B<$name $sc> $biText\n"

		puts docstring "\n"

		printMethods name
	}

	puts "=back\n"
}


proc setup {} {
	var keys = [_::docstring_keys]
	#keys = [slice keys 0 5]		# temp!

	keys = [sort {cmp a b} keys]

	DocStrings = [map {value [_::docstring_get a]} keys]
}




setup
printFunctions
printClasses
#printMethods "Lang::Object"
