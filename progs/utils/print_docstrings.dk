

=pod too slow

proc trimSpc {text} {
	'''Remove all spaces following a newline in a string.'''
	var index = 0
	var startOfLine = true
	var result = [stringSized text.size]
	var skipSpace = true

	for c in text {
		[not c.isSpace] && (skipSpace = false)

		if [not skipSpace] {
			result@index = c
			index = index + 1

			if (c.isSpace) {
				skipSpace = true
			}
		}
	}

	return [slice result 0 (index - 1)]
}

=cut

perlproc trimSpc {s} '''
$s =~ s/\A\s*//gmx;
$s =~ s/\s*\z//gmx;

$s =~ s/([^\n])\n([^\n])/$1 $2/gmx;
$s =~ s/(\n)[ \t]+/$1/gmx;
$s =~ s/[ \t]+/ /gmx;
return $s;
'''

puts "Getting docstrings..."
var keys = [_::docstring_keys]
#keys = [slice keys 0 5]		# temp!

puts "Sorting keys..."
keys = [sort {cmp a b} keys]

puts "Getting strings..."
var docStrings = [map {value [_::docstring_get a]} keys]

puts "Selecting procedures..."
docStrings = [reduce {
	value (a@0 == :proc && ([slice (a@1) 0 3] != '__::'))
	   } docStrings]

puts "=head1 Functions\n\n"
puts "=over\n\n"


# [:proc <name> <builtin> <args> <docstring>]

for doc in docStrings {
	var fname = (doc@1)
	var fbuiltin = (doc@2)
	var fnargs = (doc@3)
	var fdoc = [trimSpc (doc@4)]

	var biText = ""
	fbuiltin && (biText = " B<(Built-in)>")

	puts "=item B<$fname \{$fnargs\}>$biText\n"


	puts fdoc "\n"
}

puts "=back\n"

