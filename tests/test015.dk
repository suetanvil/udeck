
proc xcmp {a b} {
	if {==  a b} {
		puts a.printable " == " b.printable
	} else {
		puts a.printable " != " b.printable
	}
}


xcmp 1 1
xcmp 2 1
xcmp 2.0 2
puts

xcmp "foo" 4
xcmp "foo" "bar"
xcmp "foo" "foo"
puts

var f
set f "foo"
xcmp f f
puts

xcmp "foo" :foo
xcmp :foo "foo"
xcmp :foo :foo
xcmp :foo :bar
puts

xcmp [list 1 2 3] [list 4 5 6]
xcmp [list 1 2 3 "foo"] [list 1 2 3 "foo"]
xcmp [list 1 2 3 "foo"] [list 1 2 3 "foo" 5 6]
puts

xcmp ::1 ::2
xcmp ::1 ::1
xcmp ::"foo" ::"foo"
xcmp ::"foo" ::"bar"

# More changes
xcmp nil nil
xcmp nil 42
xcmp nil "foo"
puts

xcmp [byteArray 1 2 3 4] [byteArray 1 2 3 4]
xcmp [byteArray 1 2 3 4] [byteArray 1 2 3]
xcmp [byteArray 1 2 3 4] [list 1 2 3 4]
xcmp [byteArray 120 120 120 120] "xxxx"
puts


# Class tests
class Foo {
	readable a b
	method _init {ia ib} {
		a = ia
		b = ib
	}

	method printable_get {} {
		var cl = self.class.name
		return "[$cl->new $a $b]"
	}

	method op_Equals {other} {
		(other.class == Foo) || [return false]
		return (a == other.a && b == other.b)		
	}
}

class Bar Foo {
	method op_Equals {other} {
		(other.class == Bar || other.class == Foo) && \
			[return [super->op_Equals other]]
		return false
	}
} 


var a = [Foo->new 1 2]
var b = [Foo->new 1 2]
var c = [Foo->new 2 3]

xcmp a b
xcmp a c
xcmp b c
xcmp a "hello, world"
puts

var d = [Bar->new 1 2]
var e = [Bar->new 2 11]

xcmp d e
xcmp a d
xcmp d a
puts


class Yup {method op_Equals {other} {return true}}

f = [Yup->new]
var g = [Yup->new]
xcmp f g
xcmp f 42
xcmp 42 f
xcmp f e
xcmp e f
xcmp a f
xcmp f a


