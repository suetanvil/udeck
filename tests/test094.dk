# Test finalizers in proc

# Test basic finalizer, possibly with early return
proc foo {p} {
	puts "foo calling p: "
	puts [p]
	puts "foo done."
	return "foo return value"
} {
	puts "foo finalizer called."
}

# Test finalizer with early return of foo
proc bar {} {
	puts "Calling 'foo'."
	foo {} => {puts "bye!"; return "bar return value"}
	return 0
}

# Test hook call inside finalizer
proc quux {p} {
	puts "ho hum"
	return "quux return value"
} {
	puts "Calling quux{p}:"
	p
}

# Test return by continuation from block defined inside finalizer
proc bobo {} {
	puts "called bobo"
	return "bobo return value"
} {
	do {puts "xxx"; foo next; puts "yyy"}
}

# Test ability to access locals from final block
proc narf {f} {
	puts "narf:"

	var thingy = 44
	f return
  
	thingy = thingy - 2
} {
	puts thingy
}

# Test ability to access locals from final block after it's been
# returned
proc sneep {} {
	var l = 42
	return l
} {
	puts l
}
	

foo {} => {puts "w00t!"}
puts "---"

puts [foo {} => {puts "y4h00!"; next "block return value"; value 42}]
puts "---"

puts [bar]
puts "---"

puts [quux {}=>{puts "y0"}]
puts "---"

puts [bobo]
puts "---"

narf {r} => {puts "narf arg!"}
narf {r} => {puts "narf arg 2!"; r 42}
puts "---"

puts [sneep]
puts "---"

# Also test the finalizer in 'do'
do {
	puts "do body called"
	next 42
	puts "You should not see this."
} {
	puts "do finalizer called."
}

