# Test the IO module.

use IO


var t1 = "iotest1.tmp"

var m1 = "Hello, world!\n";
var m2 = "Hello, world 2!\n";
 

# Write the first test file
var fh
fh = [new FileHandle t1 :write Fatal]
puts fh.canRead " " fh.canWrite
fh->put m1
fh->put m2
fh->close
puts "---"

# Read it back and compare
fh = [new FileHandle t1 :read Fatal]
puts fh.canRead " " fh.canWrite
var l1 = [fh->getLine]
var l2 = [fh->getLine]

say (l1 == m1) " " l1
say (l2 == m2) " " l2

puts fh.eof
fh->close
puts "---"

# Read it back with getChars
fh = [new FileHandle t1 :read Fatal]
l1 = [fh->getChars m1.size]
l2 = [fh->getChars m2.size]

say (l1 == m1) " " l1
say (l2 == m2) " " l2

# Seek back to the start and read the first few characters with
# getChar
fh->seek 0 SEEK_SET
repeat 6 {say [fh->getChar]}
var pos = fh.pos
repeat 7 {say [fh->getChar]}

# Seek back to the previous position
fh->seek pos SEEK_SET
repeat 7 {say [fh->getChar]}

# Test seek relative to the current position
fh->seek -7 SEEK_CUR
repeat 7 {say [fh->getChar]}

# Test seek relative to the end
fh->seek -8 SEEK_END
repeat 8 {say [fh->getChar]}

puts pos
fh->close
puts "---"

# Test binary reading
fh = [new FileHandle t1 :read Fatal]
l1 = [fh->read 8]
puts l1
dofor {say [chr a]} l1
puts
fh->close 
puts "---"


# Test binary writing
fh = [new FileHandle t1 :write Fatal]
l1 = [fh->write [byteArray 72 101 108 108 111 44 32 119 111 114 108 100 33 10]]
fh->close

fh = [new FileHandle t1 :read Fatal]
say [fh->slurp]
fh->close
puts "---"

# Test binary reading past the end of the file
fh = [new FileHandle t1 :read Fatal]
l1 = [fh->read 3000]
fh->close 
dofor {say [chr a]} l1
puts "---"

# Test reading and writing
fh = [new FileHandle t1 :readwrite Fatal]
puts [fh->getChars 5]
fh->seek 0 SEEK_SET

fh->put "Howdy"
fh->seek 0 SEEK_SET

say [fh->slurp]
fh->close
puts "---"

# Test reading past EOF
fh = [new FileHandle t1 :read Fatal]
say [fh->getLine]
say [fh->getLine]
say [fh->getLine]
fh->close
puts "---"

fh = [new FileHandle t1 :read Fatal]
puts [fh->read 100]
puts [fh->read 100]
fh->close
puts "---"

fh = [new FileHandle t1 :read Fatal]
say [fh->getChars 100]
puts ">>>" [fh->getChars 100] "<<<"
fh->close
puts "---"


# Test 'dofile'
dofile "non-existant-file.txt" :read {
	var f = [fh->slurp]
	puts "File contents: $f"
} catch {
	puts Error.printable
}
puts "---"

dofile t1 :read {
	say "Slurping $t1: " [fh->slurp]
}
puts "---"

dofile t1 :write {
	fh->puts "We Meet Again, World!"
}
dofile t1 :read {
	say "Slurping $t1: " [fh->slurp]
}
puts "---"


# Test 'stat'
var status = [stat t1]
puts "Size = "  status.size
puts "nlink = " status.nlink
puts "name = " status.name

# Status failure
try {
	var x = [stat "nonexistant-file.txt" Error]
	puts x
} catch {
	puts Error
}


