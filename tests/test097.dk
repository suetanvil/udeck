# Test the IO module.

use IO


var t1 = "iotest1.tmp"

var m1 = "Hello, world!\n";
var m2 = "Hello, world 2!\n";
 

# Write the first test file
var fh
fh = [new FileHandle t1 :write Fatal]
puts fh.canRead " " fh.canWrite
fh->put m1
fh->put m2
fh->close
puts "---"

# Read it back and compare
fh = [new FileHandle t1 :read Fatal]
puts fh.canRead " " fh.canWrite
var l1 = [fh->getLine]
var l2 = [fh->getLine]

say (l1 == m1) " " l1
say (l2 == m2) " " l2

puts fh.eof
fh->close
puts "---"

# Read it back with getChars
fh = [new FileHandle t1 :read Fatal]
l1 = [fh->getChars m1.size]
l2 = [fh->getChars m2.size]

say (l1 == m1) " " l1
say (l2 == m2) " " l2

# Seek back to the start and read the first few characters with
# getChar
fh->seek 0 SEEK_SET
repeat 6 {say [fh->getChar]}
var pos = fh.pos
repeat 7 {say [fh->getChar]}

# Seek back to the previous position
fh->seek pos SEEK_SET
repeat 7 {say [fh->getChar]}

# Test seek relative to the current position
fh->seek -7 SEEK_CUR
repeat 7 {say [fh->getChar]}

# Test seek relative to the end
fh->seek -8 SEEK_END
repeat 8 {say [fh->getChar]}

puts pos
fh->close
puts "---"

# Test binary reading
fh = [new FileHandle t1 :read Fatal]
l1 = [fh->read 8]
puts l1
dofor {say [chr a]} l1
puts
fh->close 
puts "---"


# Test binary writing
fh = [new FileHandle t1 :write Fatal]
l1 = [fh->write [byteArray 72 101 108 108 111 44 32 119 111 114 108 100 33 10]]
fh->close

fh = [new FileHandle t1 :read Fatal]
say [fh->slurp]
fh->close
puts "---"

# Test binary reading past the end of the file
fh = [new FileHandle t1 :read Fatal]
l1 = [fh->read 3000]
fh->close 
dofor {say [chr a]} l1
puts "---"

# Test reading and writing
fh = [new FileHandle t1 :readwrite Fatal]
puts [fh->getChars 5]
fh->seek 0 SEEK_SET

fh->put "Howdy"
fh->seek 0 SEEK_SET

say [fh->slurp]
fh->close
puts "---"

# Test reading past EOF
fh = [new FileHandle t1 :read Fatal]
say [fh->getLine]
say [fh->getLine]
say [fh->getLine]
fh->close
puts "---"

fh = [new FileHandle t1 :read Fatal]
puts [fh->read 100]
puts [fh->read 100]
fh->close
puts "---"

fh = [new FileHandle t1 :read Fatal]
say [fh->getChars 100]
puts ">>>" [fh->getChars 100] "<<<"
fh->close
puts "---"


# Test 'dofile'
dofile "non-existant-file.txt" :read {
	var f = [fh->slurp]
	puts "File contents: $f"
} catch {
	puts Error.printable
}
puts "---"

dofile t1 :read {
	say "Slurping $t1: " [fh->slurp]
}
puts "---"

dofile t1 :write {
	fh->puts "We Meet Again, World!"
}
dofile t1 :read {
	say "Slurping $t1: " [fh->slurp]
}
puts "---"


# Test 'stat'
var status = [stat t1]
puts "Size = "  status.size
puts "nlink = " status.nlink
puts "name = " status.name

# Status failure
try {
	var x = [stat "nonexistant-file.txt" Error]
	puts x
} catch {
	puts Error
}
puts "------------"

# Test mkdir/lsdir/unlink/rmdir
var tmpdir = "tmp-test097"

puts "This should succeed: " [mkdir tmpdir]
puts "This should fail: " [mkdir tmpdir]	

try {
	mkdir tmpdir :[7 7 7] Error
} catch {
	puts "Expected exception: " Error
}
puts "---"

puts "Contents: " [lsdir tmpdir]
dofile "$tmpdir/foo" :write {
	fh->puts "This is not a line of text."
}
puts "New Contents: " [lsdir tmpdir]
puts "lsdir failure: " [lsdir ("xxx" + tmpdir)]

try {
	lsdir ("xxx" + tmpdir) Error
} catch {puts "Expected exception: " Error}
puts "---"

puts "Stat foo: " [stat (tmpdir + "/foo")]

puts "Should succeed: " [unlink (tmpdir + "/foo")]
puts "Should fail: " [unlink (tmpdir + "/foo")]
try {
	unlink (tmpdir + "/foo") Error
} catch {puts "Expected exception: " Error}

puts "Stat foo (should be nil): " [stat (tmpdir + "/foo")]

try {
	stat (tmpdir + "/foo") Error
} catch {puts "Expected exception: " Error}
puts "---"


puts "Should succeed: " [rmdir tmpdir]
puts "Should fail: " [rmdir tmpdir]
try {
	rmdir tmpdir Error
} catch {puts "Expected exception: " Error}
puts "---"


# Test FileHandle without exceptions
do {
	var fh = [FileHandle->new "nonexistentfile.txt" :read nil]
	puts "These should fail:"
	puts "eof: " fh.eof
	puts "getLine: " [fh->getLine]
	puts "slurp: " [fh->slurp]
	puts "getChar: " [fh->getChar]
	puts "getChars: " [fh->getChars 10]
	puts "put: " [fh->put "xxx"]
	puts "puts: " [fh->puts "xxx" "yyy"]
	puts "write: " [fh->write [byteArray 1 2 3 4 5]]
	puts "read: " [fh->read 10]
	puts "pos: " fh.pos
	puts "seek: " [fh->seek 1 SEEK_SET]
	puts "isOpen: " fh.isOpen
	puts "---"
}

# Test FileHandle with exceptions
try {
	say "This should throw an exception: "
	var fh = [FileHandle->new "nonexistentfile.txt" :read Error]
} catch {puts Error}

proc doot {fh desc pr} {
	say desc " "
	try {
		fh.exception = Error
		pr
	} catch {
		puts Error
	}
}

do {
	var fh = [FileHandle->new "nonexistentfile.txt" :read nil]
	puts "These should fail:"

	doot fh "getLine: " {}=>{fh->getLine}
	doot fh "slurp: " {}=>{fh->slurp}
	doot fh "getChar: " {}=>{fh->getChar}
	doot fh "getChars: " {}=>{fh->getChars 10}
	doot fh "put: " {}=>{fh->put "xxx"}
	doot fh "puts: " {}=>{fh->puts "xxx" "yyy"}
	doot fh "write: " {}=>{fh->write [byteArray 1 2 3 4 5]}
	doot fh "read: " {}=>{fh->read 10}
	doot fh "seek: " {}=>{fh->seek 1 SEEK_SET}
	puts "---"
}




